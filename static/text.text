=============== Eccommerce/settings ==========================

"""
Django settings for Ecommerce project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w7*knmwhlnah4wz3_nguv(d*0+a#j$ertnrb73iw-xsom0zwa-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store.apps.StoreConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates",],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Mannually Added

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_ROOT = (BASE_DIR/ 'static',)
MEDIA_URL = '/imgs/'



***************************************************************************

========================= Eccommerce/urls ==================================

"""Ecommerce URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('store.urls')),
]


**************************************************************************



========================= store/admin ==================================

from django.contrib import admin
from .models import *
# Register your models here.

admin.site.register(Customer)
admin.site.register(Product)
admin.site.register(Order)
admin.site.register(OrderItem)
admin.site.register(ShippingAddress)




**************************************************************************



========================= store/apps ==================================

from django.apps import AppConfig


class StoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'store'



**************************************************************************



========================= store/models ==================================

from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class Customer(models.Model):
	user = models.OneToOneField(User, null=True, blank=True, on_delete=models.CASCADE)
	name = models.CharField(max_length=200, null=True)
	email = models.CharField(max_length=200)

	def __str__(self):
		return self.name

class Product(models.Model):
	name = models.CharField(max_length=200)
	price = models.DecimalField(max_digits=7, decimal_places=2)
	digital = models.BooleanField(default=False,null=True, blank=True)
	image = models.ImageField(null=True, blank=True)

	def __str__(self):
		return self.name

	@property
	def imageURL(self):
		try:
			url = self.image.url
		except:
			url = ''
		return url

class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, blank=True)
    date_ordered = models.DateTimeField(auto_now_add=True)
    complete = models.BooleanField(default=False)
    transaction_id = models.CharField(max_length=100, null=True)

    def __str__(self):
        return str(self.id)

    @property
    def get_cart_total(self):
        orderitems = self.orderitem_set.all()
        total = sum([item.get_total for item in orderitems])
        return total

    @property
    def get_cart_items(self):
        orderitems = self.orderitem_set.all()
        total = sum([item.quantity for item in orderitems])
        return total

    @property
    def shipping(self):
        shipping = False
        orderitems = self.orderitem_set.all()
        for i in orderitems:
            if i.product.digital == False:
                shipping = True
        return shipping
        
class OrderItem(models.Model):
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True)
    quantity = models.IntegerField(default=0, null=True, blank=True)
    date_added = models.DateTimeField(auto_now_add=True)

    @property
    def get_total(self):
        total = self.product.price * self.quantity
        return total


class ShippingAddress(models.Model):
	customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)
	order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True)
	address = models.CharField(max_length=200, null=False)
	city = models.CharField(max_length=200, null=False)
	state = models.CharField(max_length=200, null=False)
	zipcode = models.CharField(max_length=200, null=False)
	date_added = models.DateTimeField(auto_now_add=True)

	def __str__(self):
		return self.address

**************************************************************************



========================= store/urls ==================================

from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('', views.store, name="store"),
    path('cart/', views.cart, name="cart"),
    path('checkout/', views.checkout, name="checkout"),

    path('update_item/', views.updateItem, name="update_item"),
    path('process_order/', views.processOrder, name="process_order"),
]

**************************************************************************



========================= store/views ==================================

from store.models import Product
from django.shortcuts import render
from .models import *
from django.http import JsonResponse
import json
import datetime
from .utils import cookieCart, cartData, guestOrder

# Create your views here.
def store(request):
    data = cartData(request)

    cartItems = data['cartItems']
    order = data['order']
    items = data['items']

    products = Product.objects.all()
    context = {'products':products, 'cartItems':cartItems}
    # context = {}
    return render(request, 'store/store.html', context)


def cart(request):
	data = cartData(request)

	cartItems = data['cartItems']
	order = data['order']
	items = data['items']

	context = {'items':items, 'order':order, 'cartItems':cartItems}
    # context = {}
    return render(request, 'store/cart.html', context)

def checkout(request):
    data = cartData(request)
	
    cartItems = data['cartItems']
    order = data['order']
    items = data['items']

    context = {'items':items, 'order':order, 'cartItems':cartItems}
    context = {}
    return render(request, 'store/checkout.html', context)

def updateItem(request):
    data = json.loads(request.body)
    productId = data['productId']
    action = data['action']
    print('Action:', action)
    print('Product:', productId)

    customer = request.user.customer
    product = Product.objects.get(id=productId)
    order, created = Order.objects.get_or_create(customer=customer, complete=False)

    orderItem, created = OrderItem.objects.get_or_create(order=order, product=product)
	
    if action == 'add':
    	orderItem.quantity = (orderItem.quantity + 1)
    elif action == 'remove':
    	orderItem.quantity = (orderItem.quantity - 1)

    orderItem.save()

    if orderItem.quantity <= 0:
    	orderItem.delete()

    return JsonResponse('Item was added', safe=False)

def processOrder(request):
	transaction_id = datetime.datetime.now().timestamp()
	data = json.loads(request.body)

	if request.user.is_authenticated:
		customer = request.user.customer
		order, created = Order.objects.get_or_create(customer=customer, complete=False)
	else:
		customer, order = guestOrder(request, data)

	total = float(data['form']['total'])
	order.transaction_id = transaction_id

	if total == order.get_cart_total:
		order.complete = True
	order.save()

	if order.shipping == True:
		ShippingAddress.objects.create(
		customer=customer,
		order=order,
		address=data['shipping']['address'],
		city=data['shipping']['city'],
		state=data['shipping']['state'],
		zipcode=data['shipping']['zipcode'],
		)

	return JsonResponse('Payment submitted..', safe=False)

**************************************************************************

========================= index.html ==================================

{% load static %}

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Ecommerce | {% block title %}{% endblock title %}</title>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1" />

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
        integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">

    <script type="text/javascript">
        var user = '{{request.user}}'

        function getToken(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = cookies[i].trim();
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
        var csrftoken = getToken('csrftoken')

        function getCookie(name) {
            // Split cookie string and get all individual name=value pairs in an array
            var cookieArr = document.cookie.split(";");

            // Loop through the array elements
            for (var i = 0; i < cookieArr.length; i++) {
                var cookiePair = cookieArr[i].split("=");

                /* Removing whitespace at the beginning of the cookie name
                and compare it with the given string */
                if (name == cookiePair[0].trim()) {
                    // Decode the cookie value and return
                    return decodeURIComponent(cookiePair[1]);
                }
            }

            // Return null if not found
            return null;
        }
        var cart = JSON.parse(getCookie('cart'))

        if (cart == undefined) {
            cart = {}
            console.log('Cart Created!', cart)
            document.cookie = 'cart=' + JSON.stringify(cart) + ";domain=;path=/"
        }
        console.log('Cart:', cart)

    </script>

</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" href="{% url 'store' %}">Ecommerce</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="{% url 'store' %}">Store <span class="sr-only">(current)</span></a>
                </li>

            </ul>
            <div class="form-inline my-2 my-lg-0">
                <a href="#" class="btn btn-warning">Login</a>

                <a href="{% url 'cart' %}">
                    <img id="cart-icon" src="{% static 'imgs/cart.png' %}">
                </a>
                <p id="cart-total">{{cartItems}}</p>

            </div>
        </div>
    </nav>



    {% block body %}



    {% endblock body %}

    <div class="container-fluid bg-dark">
        <footer class="py-3 my-4">
            <ul class="nav justify-content-center border-bottom pb-3 mb-3">
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">Home</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">Features</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">Pricing</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">FAQs</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">About</a></li>
            </ul>
            <p class="text-center text-muted">© 2021 Company, Inc</p>
        </footer>
    </div>


    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script> -->

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
    -->

    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>

    <script type="text/javascript" src="{% static 'js/script.js' %}"></script>

</body>

</html>



**************************************************************************


========================= store.html ==================================

{% extends 'store/index.html' %}
{% block title %}Store{% endblock title %}

{% load static %}
{% block body %}



<div class="album py-5 bg-light">
    <div class="container">

        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            <div class="col">
                <div class="card shadow-sm">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225"
                        xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                        preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                            dy=".3em">Thumbnail</text>
                    </svg>

                    <div class="card-body">
                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to
                            additional content. This content is a little bit longer.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                            </div>
                            <small class="text-muted">9 mins</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card shadow-sm">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225"
                        xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                        preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                            dy=".3em">Thumbnail</text>
                    </svg>

                    <div class="card-body">
                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to
                            additional content. This content is a little bit longer.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                            </div>
                            <small class="text-muted">9 mins</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card shadow-sm">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225"
                        xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                        preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                            dy=".3em">Thumbnail</text>
                    </svg>

                    <div class="card-body">
                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to
                            additional content. This content is a little bit longer.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                            </div>
                            <small class="text-muted">9 mins</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="card shadow-sm">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225"
                        xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                        preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                            dy=".3em">Thumbnail</text>
                    </svg>

                    <div class="card-body">
                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to
                            additional content. This content is a little bit longer.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                            </div>
                            <small class="text-muted">9 mins</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card shadow-sm">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225"
                        xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                        preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                            dy=".3em">Thumbnail</text>
                    </svg>

                    <div class="card-body">
                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to
                            additional content. This content is a little bit longer.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                            </div>
                            <small class="text-muted">9 mins</small>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card shadow-sm">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225"
                        xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                        preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                            dy=".3em">Thumbnail</text>
                    </svg>

                    <div class="card-body">
                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to
                            additional content. This content is a little bit longer.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                            </div>
                            <small class="text-muted">9 mins</small>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col">
                <div class="card shadow-sm">
                    <svg class="bd-placeholder-img card-img-top" width="100%" height="225"
                        xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: Thumbnail"
                        preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                            dy=".3em">Thumbnail</text>
                    </svg>

                    <div class="card-body">
                        <p class="card-text">This is a wider card with supporting text below as a natural lead-in to
                            additional content. This content is a little bit longer.</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary">View</button>
                                <button type="button" class="btn btn-sm btn-outline-secondary">Edit</button>
                            </div>
                            <small class="text-muted">9 mins</small>
                        </div>
                    </div>
                </div>
            </div>
            
            
        </div>
    </div>
</div>



<!-- <div class="row">
    {% for product in products %}
    <div class="col-lg-4">
        <img class="thumbnail" src="{{product.imageURL}}">
        <div class="box-element product">
            <h6><strong>{{product.name}}</strong></h6>
            <hr>
            <button data-product={{product.id}} data-action="add"
                class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            <h4 style="display: inline-block; float: right"><strong>${{product.price|floatformat:2}}</strong></h4>

        </div>
    </div>
    {% endfor %}
</div> -->



{% endblock body %}

**************************************************************************


========================= cart.html ==================================

{% extends 'store/index.html' %}
{% block title %}Cart{% endblock title %}
{% load static %}
{% block body %}

<div class="row">
    <div class="col-lg-12">
        <div class="box-element">

            <a class="btn btn-outline-dark" href="{% url 'store' %}">&#x2190; Continue Shopping</a>

            <br>
            <br>
            <table class="table">
                <tr>
                    <th>
                        <h5>Items: <strong>{{order.get_cart_items}}</strong></h5>
                    </th>
                    <th>
                        <h5>Total:<strong>${{order.get_cart_total}}</strong></h5>
                    </th>
                    <th>
                        <a style="float:right; margin:5px;" class="btn btn-success"
                            href="{% url 'checkout' %}">Checkout</a>
                    </th>
                </tr>
            </table>

        </div>

        <br>
        <div class="box-element">
            <div class="cart-row">
                <div style="flex:2"></div>
                <div style="flex:2"><strong>Item</strong></div>
                <div style="flex:1"><strong>Price</strong></div>
                <div style="flex:1"><strong>Quantity</strong></div>
                <div style="flex:1"><strong>Total</strong></div>
            </div>

            {% for item in items %}
            <div class="cart-row">
                <div style="flex:2"><img class="row-image" src="{{item.product.imageURL}}"></div>
                <div style="flex:2">
                    <p>{{item.product.name}}</p>
                </div>
                <div style="flex:1">
                    <p>${{item.product.price|floatformat:2}}</p>
                </div>
                <div style="flex:1">
                    <p class="quantity">{{item.quantity}}</p>
                    <div class="quantity">
                        <img data-product={{item.product.id}} data-action="add" class="chg-quantity update-cart"
                            src="{% static  'imgs/arrow-up.png' %}">

                        <img data-product={{item.product.id}} data-action="remove" class="chg-quantity update-cart"
                            src="{% static  'imgs/arrow-down.png' %}">
                    </div>
                </div>
                <div style="flex:1">
                    <p>${{item.get_total}}</p>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>


{% endblock body %}


**************************************************************************


========================= checkout.html ==================================

{% extends 'store/index.html' %}
{% block title %}Checkout{% endblock title %}

{% load static %}
{% block body %}

<div class="row">
    <div class="col-lg-6">
        <div class="box-element" id="form-wrapper">
            <form id="form">
                <div id="user-info">
                    <div class="form-field">
                        <input required class="form-control" type="text" name="name" placeholder="Name..">
                    </div>
                    <div class="form-field">
                        <input required class="form-control" type="email" name="email" placeholder="Email..">
                    </div>
                </div>

                <div id="shipping-info">
                    <hr>
                    <p>Shipping Information:</p>
                    <hr>
                    <div class="form-field">
                        <input class="form-control" type="text" name="address" placeholder="Address..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="city" placeholder="City..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="state" placeholder="State..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="zipcode" placeholder="Zip code..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="country" placeholder="Zip code..">
                    </div>
                </div>

                <hr>
                <input id="form-button" class="btn btn-success btn-block" type="submit" value="Continue">
            </form>
        </div>

        <br>
        <div class="box-element hidden" id="payment-info">
            <small>Paypal Options</small>
            <div id="paypal-button-container"></div>
            <!--<button id="make-payment">Make payment</button>-->

        </div>

    </div>

    <div class="col-lg-6">
        <div class="box-element">
            <a class="btn btn-outline-dark" href="{% url 'cart' %}">&#x2190; Back to Cart</a>
            <hr>
            <h3>Order Summary</h3>
            <hr>
            {% for item in items %}
            <div class="cart-row">
                <div style="flex:2"><img class="row-image" src="{{item.product.imageURL}}"></div>
                <div style="flex:2">
                    <p>{{item.product.name}}</p>
                </div>
                <div style="flex:1">
                    <p>${{item.product.price|floatformat:2}}</p>
                </div>
                <div style="flex:1">
                    <p>x{{item.quantity}}</p>
                </div>
            </div>
            {% endfor %}
            <h5>Items: {{order.get_cart_items}}</h5>
            <h5>Total: ${{order.get_cart_total|floatformat:2}}</h5>
        </div>
    </div>
</div>

<script
    src="https://www.paypal.com/sdk/js?client-id=Aew-EHnbIL9nRLOnrGTg-PMjg3tf1mDMY10-U1ZFrHtnROBz1LXEM0LvUsTAG_fr6bbZCpilphJObhej&currency=USD"></script>

<script>

    var total = '{{order.get_cart_total|floatformat:2}}'
    // Render the PayPal button into #paypal-button-container
    paypal.Buttons({

        // Set up the transaction
        createOrder: function (data, actions) {
            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: parseFloat(total).toFixed(2)
                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (orderData) {
                // Successful capture! For demo purposes:
                console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
                var transaction = orderData.purchase_units[0].payments.captures[0];
                submitFormData()

                // Replace the above to show a success message within this page, e.g.
                // const element = document.getElementById('paypal-button-container');
                // element.innerHTML = '';
                // element.innerHTML = '<h3>Thank you for your payment!</h3>';
                // Or go to another URL:  actions.redirect('thank_you.html');
            });
        }


    }).render('#paypal-button-container');
</script>

<script type="text/javascript">
    var shipping = '{{order.shipping}}'
    var total = '{{order.get_cart_total|floatformat:2}}'

    if (shipping == 'False') {
        document.getElementById('shipping-info').innerHTML = ''
    }

    if (user != 'AnonymousUser') {
        document.getElementById('user-info').innerHTML = ''
    }

    if (shipping == 'False' && user != 'AnonymousUser') {
        //Hide entire form if user is logged in and shipping is false
        document.getElementById('form-wrapper').classList.add("hidden");
        //Show payment if logged in user wants to buy an item that does not require shipping
        document.getElementById('payment-info').classList.remove("hidden");
    }

    var form = document.getElementById('form')
    form.addEventListener('submit', function (e) {
        e.preventDefault()
        console.log('Form Submitted...')
        document.getElementById('form-button').classList.add("hidden");
        document.getElementById('payment-info').classList.remove("hidden");
    })

    function submitFormData() {
        console.log('Payment button clicked')

        var userFormData = {
            'name': null,
            'email': null,
            'total': total,
        }

        var shippingInfo = {
            'address': null,
            'city': null,
            'state': null,
            'zipcode': null,
        }

        if (shipping != 'False') {
            shippingInfo.address = form.address.value
            shippingInfo.city = form.city.value
            shippingInfo.state = form.state.value
            shippingInfo.zipcode = form.zipcode.value
        }

        if (user == 'AnonymousUser') {
            userFormData.name = form.name.value
            userFormData.email = form.email.value
        }

        console.log('Shipping Info:', shippingInfo)
        console.log('User Info:', userFormData)

        var url = "/process_order/"
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'applicaiton/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify({ 'form': userFormData, 'shipping': shippingInfo }),

        })
            .then((response) => response.json())
            .then((data) => {
                console.log('Success:', data);
                alert('Transaction completed');

                cart = {}
                document.cookie = 'cart=' + JSON.stringify(cart) + ";domain=;path=/"

                window.location.href = "{% url 'store' %}"

            })
    }
</script>


{% endblock body %}

**************************************************************************


========================= store.html( before Finalize) ==================================

{% extends 'store/index.html' %}
{% block title %}Store{% endblock title %}

{% load static %}
{% block body %}



<div class="row">

    <div class="col-lg-4">
        <img class="thumbnail" src="{% static 'imgs\placeholder.png' %}">
        <div class="box-element product">
            <h6><strong>product</strong></h6>
            <hr>
            <button data-product=1 data-action="add"
                class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            <h4 style="display: inline-block; float: right"><strong>price</strong></h4>

        </div>
    </div>

    <div class="col-lg-4">
        <img class="thumbnail" src="{% static 'imgs\placeholder.png' %}">
        <div class="box-element product">
            <h6><strong>product</strong></h6>
            <hr>
            <button data-product=2 data-action="add"
                class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            <h4 style="display: inline-block; float: right"><strong>price</strong></h4>

        </div>
    </div>

    <div class="col-lg-4">
        <img class="thumbnail" src="{% static 'imgs\placeholder.png' %}">
        <div class="box-element product">
            <h6><strong>product</strong></h6>
            <hr>
            <button data-product=3} data-action="add"
                class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            <h4 style="display: inline-block; float: right"><strong>price</strong></h4>

        </div>
    </div>

</div>






<!-- <div class="row">
    {% for product in products %}
    <div class="col-lg-4">
        <img class="thumbnail" src="{{product.imageURL}}">
        <div class="box-element product">
            <h6><strong>{{product.name}}</strong></h6>
            <hr>
            <button data-product={{product.id}} data-action="add"
                class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            <h4 style="display: inline-block; float: right"><strong>${{product.price|floatformat:2}}</strong></h4>

        </div>
    </div>
    {% endfor %}
</div> -->



{% endblock body %}


**************************************************************************
**************************************************************************
**************************************************************************
**************************************************************************
**************************************************************************
**************************************************************************














==================================================== Ecommerce/__init__.py  ====================================================
         
      
         --------------------------31-12-2021---------------------             


********************************************************************************************************************************************

==================================================== Ecommerce/settings.py  ====================================================


"""
Django settings for Ecommerce project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w7*knmwhlnah4wz3_nguv(d*0+a#j$ertnrb73iw-xsom0zwa-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store.apps.StoreConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates",],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Mannually Added

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_ROOT = (BASE_DIR/ 'static')
MEDIA_URL = '/imgs/'



********************************************************************************************************************************************


==================================================== Ecommerce/urls.py  ====================================================

"""Ecommerce URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from os import set_inheritable
from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('store.urls')),
]

urlpatterns += static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT)

********************************************************************************************************************************************

==================================================== store/admin.py  ====================================================



from django.contrib import admin
from .models import *
# Register your models here.

admin.site.register(Customer)
admin.site.register(Product)
admin.site.register(Order)
admin.site.register(OrderItem)
admin.site.register(ShippingAddress)






********************************************************************************************************************************************


==================================================== store/apps.py  ====================================================


from django.apps import AppConfig


class StoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'store'




********************************************************************************************************************************************

==================================================== store/models.py  ====================================================


from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class Customer(models.Model):
	user = models.OneToOneField(User, null=True, blank=True, on_delete=models.CASCADE)
	name = models.CharField(max_length=200, null=True)
	email = models.CharField(max_length=200)

	def __str__(self):
		return self.name

class Product(models.Model):
	name = models.CharField(max_length=200)
	price = models.DecimalField(max_digits=7, decimal_places=2)
	digital = models.BooleanField(default=False,null=True, blank=True)
	image = models.ImageField(null=True, blank=True)

	def __str__(self):
		return self.name

	@property
	def imageURL(self):
		try:
			url = self.image.url
		except:
			url = ''
		return url

class Order(models.Model):
    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True, blank=True)
    date_ordered = models.DateTimeField(auto_now_add=True)
    complete = models.BooleanField(default=False)
    transaction_id = models.CharField(max_length=100, null=True)

    def __str__(self):
        return str(self.id)

    @property
    def get_cart_total(self):
        orderitems = self.orderitem_set.all()
        total = sum([item.get_total for item in orderitems])
        return total

    @property
    def get_cart_items(self):
        orderitems = self.orderitem_set.all()
        total = sum([item.quantity for item in orderitems])
        return total

    @property
    def shipping(self):
        shipping = False
        orderitems = self.orderitem_set.all()
        for i in orderitems:
            if i.product.digital == False:
                shipping = True
        return shipping
        
class OrderItem(models.Model):
    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)
    order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True)
    quantity = models.IntegerField(default=0, null=True, blank=True)
    date_added = models.DateTimeField(auto_now_add=True)

    @property
    def get_total(self):
        total = self.product.price * self.quantity
        return total


class ShippingAddress(models.Model):
	customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)
	order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True)
	address = models.CharField(max_length=200, null=False)
	city = models.CharField(max_length=200, null=False)
	state = models.CharField(max_length=200, null=False)
	zipcode = models.CharField(max_length=200, null=False)
	date_added = models.DateTimeField(auto_now_add=True)

	def __str__(self):
		return self.address




********************************************************************************************************************************************


==================================================== store/urls.py  ====================================================


from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('', views.store, name="store"),
    path('cart/', views.cart, name="cart"),
    path('checkout/', views.checkout, name="checkout"),
    path('update_item/', views.updateItem, name="update_item"),
    path('process_order/', views.processOrder, name="process_order"),
]



********************************************************************************************************************************************


==================================================== store/utils.py  ====================================================


import json
from .models import *

def cookieCart(request):

	#Create empty cart for now for non-logged in user
	try:
		cart = json.loads(request.COOKIES['cart'])
	except:
		cart = {}
		print('CART:', cart)

	items = []
	order = {'get_cart_total':0, 'get_cart_items':0, 'shipping':False}
	cartItems = order['get_cart_items']

	for i in cart:
		#We use try block to prevent items in cart that may have been removed from causing error
		try:
			cartItems += cart[i]['quantity']

			product = Product.objects.get(id=i)
			total = (product.price * cart[i]['quantity'])

			order['get_cart_total'] += total
			order['get_cart_items'] += cart[i]['quantity']

			item = {
				'id':product.id,
				'product':{
					'id':product.id,
					'name':product.name, 
					'price':product.price, 
				        'imageURL':product.imageURL
					}, 
				'quantity':cart[i]['quantity'],
				'digital':product.digital,
				'get_total':total,
				}
			items.append(item)

			if product.digital == False:
				order['shipping'] = True
		except:
			pass
			
	return {'cartItems':cartItems ,'order':order, 'items':items}

def cartData(request):
	if request.user.is_authenticated:
		customer = request.user.customer
		order, created = Order.objects.get_or_create(customer=customer, complete=False)
		items = order.orderitem_set.all()
		cartItems = order.get_cart_items
	else:
		cookieData = cookieCart(request)
		cartItems = cookieData['cartItems']
		order = cookieData['order']
		items = cookieData['items']

	return {'cartItems':cartItems ,'order':order, 'items':items}

	
def guestOrder(request, data):
	name = data['form']['name']
	email = data['form']['email']

	cookieData = cookieCart(request)
	items = cookieData['items']

	customer, created = Customer.objects.get_or_create(
			email=email,
			)
	customer.name = name
	customer.save()

	order = Order.objects.create(
		customer=customer,
		complete=False,
		)

	for item in items:
		product = Product.objects.get(id=item['id'])
		orderItem = OrderItem.objects.create(
			product=product,
			order=order,
			quantity=item['quantity'],
		)
	return customer, order



********************************************************************************************************************************************


==================================================== store/views.py  ====================================================

from store.models import Product
from django.shortcuts import render
from .models import *
from django.http import JsonResponse
import json
import datetime
from .utils import cookieCart, cartData, guestOrder

# Create your views here.


def store(request):
    if request.user.is_authenticated:
        customer = request.user.customer
        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        items = order.orderitem_set.all()
        cartItems = order.get_cart_items
    else:
        items = []
        order = {'get_cart_total': 0, 'get_cart_items': 0, 'shipping':False}
        cartItems = order['get_cart_items']
        
    products = Product.objects.all()
    context = {'products': products, 'cartItems':cartItems}
    return render(request, 'store/store.html', context)

        

    # data = cartData(request)

    # cartItems = data['cartItems']
    # order = data['order']
    # items = data['items']

    


def cart(request):
    if request.user.is_authenticated:
        customer = request.user.customer
        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        items = order.orderitem_set.all()
        cartItems = order.get_cart_items
    
    else:
        items = []
        order = {'get_cart_total': 0, 'get_cart_items': 0, 'shipping':False}
        cartItems = order['get_cart_items']
        
    context = {'items': items, 'order': order, }
    return render(request, 'store/cart.html', context)

    # data = cartData(request)

        # cartItems = data['cartItems']
        # order = data['order']
        # items = data['items']

        # context = {'items':items, 'order':order, 'cartItems':cartItems}


def checkout(request):
    if request.user.is_authenticated:
        customer = request.user.customer
        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        items = order.orderitem_set.all()
        cartItems = order.get_cart_items
    else:
        items = []
        order = {'get_cart_total': 0, 'get_cart_items': 0}
        cartItems = order['get_cart_items']
    # data = cartData(request)

    # cartItems = data['cartItems']
    # order = data['order']
    # items = data['items']

    context = {'items':items, 'order':order, 'cartItems':cartItems, 'shipping':False}
    return render(request, 'store/checkout.html', context)


def updateItem(request):
    data = json.loads(request.body)
    productId = data['productId']
    action = data['action']
    print('Action:', action)
    print('Product:', productId)

    customer = request.user.customer
    product = Product.objects.get(id=productId)
    order, created = Order.objects.get_or_create(
        customer=customer, complete=False)

    orderItem, created = OrderItem.objects.get_or_create(
        order=order, product=product)

    if action == 'add':
        orderItem.quantity = (orderItem.quantity + 1)
    elif action == 'remove':
        orderItem.quantity = (orderItem.quantity - 1)

    orderItem.save()

    if orderItem.quantity <= 0:
        orderItem.delete()

    return JsonResponse('Item was added', safe=False)


def processOrder(request):
    transaction_id = datetime.datetime.now().timestamp()
    data = json.loads(request.body)

    if request.user.is_authenticated:
        customer = request.user.customer
        order, created = Order.objects.get_or_create(customer=customer, complete=False)
        total = float(data['form']['total'])
        order.transaction_id = transaction_id

        if total == order.get_cart_total:
            order.complete = True
        order.save()

        if order.shipping == True:
            ShippingAddress.objects.create(
            customer=customer,
            order=order,
            address=data['shipping']['address'],
            city=data['shipping']['city'],
            state=data['shipping']['state'],
            zipcode=data['shipping']['zipcode'],
            country=data['shipping']['country'],
            )

    
    else:
        print("User is not logged in")

    return JsonResponse('Payment submitted..', safe=False)




********************************************************************************************************************************************


==================================================== templates/index.html  ====================================================

{% load static %}

<!DOCTYPE html>
<html lang="en">

<head>
    <title>Ecommerce | {% block title %}{% endblock title %}</title>

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1" />

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
        integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <link rel="stylesheet" type="text/css" href="{% static 'css/style.css' %}">

    <script type="text/javascript">
        var user = '{{request.user}}'

        function getToken(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = cookies[i].trim();
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
        var csrftoken = getToken('csrftoken')

        function getCookie(name) {
            // Split cookie string and get all individual name=value pairs in an array
            var cookieArr = document.cookie.split(";");

            // Loop through the array elements
            for (var i = 0; i < cookieArr.length; i++) {
                var cookiePair = cookieArr[i].split("=");

                /* Removing whitespace at the beginning of the cookie name
                and compare it with the given string */
                if (name == cookiePair[0].trim()) {
                    // Decode the cookie value and return
                    return decodeURIComponent(cookiePair[1]);
                }
            }

            // Return null if not found
            return null;
        }
        var cart = JSON.parse(getCookie('cart'))

        if (cart == undefined) {
            cart = {}
            console.log('Cart Created!', cart)
            document.cookie = 'cart=' + JSON.stringify(cart) + ";domain=;path=/"
        }
        console.log('Cart:', cart)

    </script>

</head>

<body class='bg-warning bg-gradient'>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" href="{% url 'store' %}">Ecommerce</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="{% url 'store' %}">Store <span class="sr-only">(current)</span></a>
                </li>

            </ul>
            <div class="form-inline my-2 my-lg-0">
                <a href="#" class="btn btn-warning">Login</a>

                <a href="{% url 'cart' %}">
                    <img id="cart-icon" src="{% static 'imgs/cart.png' %}">
                </a>
                <p id="cart-total">{{cartItems}}</p>

            </div>
        </div>
    </nav>


    <div class="container bg-light min-vh-100 py-3 my-4">
        
        {% block body %}



        {% endblock body %}



    </div>


    <div class="container-fluid bg-dark">
        <footer class="py-3 my-4">
            <ul class="nav justify-content-center border-bottom pb-3 mb-3">
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">Home</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">Features</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">Pricing</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">FAQs</a></li>
                <li class="nav-item"><a href="#" class="nav-link px-2 text-white text-muted">About</a></li>
            </ul>
            <p class="text-center text-muted">© 2021 Company, Inc</p>
        </footer>
    </div>


    <!-- Optional JavaScript; choose one of the two! -->

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
        crossorigin="anonymous"></script> -->

    <!-- Option 2: Separate Popper and Bootstrap JS -->
    <!--
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
    -->

    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>

    <script type="text/javascript" src="{% static 'js/script.js' %}"></script>

</body>

</html>




********************************************************************************************************************************************


==================================================== templates/store.html  ====================================================



{% extends 'store/index.html' %}
{% block title %}Store{% endblock title %}

{% load static %}
{% block body %}



<div class="row">

    {% for product in products %}
    <div class="col-lg-4">
        <img class="thumbnail" src="{{product.imageURL}}">
        <div class="box-element product">
            <h6><strong>{{product.name}}</strong></h6>
            <hr>
            <button data-product={{product.id}} data-action="add" class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            <h4 style="display: inline-block; float: right"><strong>${{product.price|floatformat:2}}</strong></h4>

        </div>
    </div>
    {% endfor %}

</div>






<!-- <div class="row">
    {% for product in products %}
    <div class="col-lg-4">
        <img class="thumbnail" src="{{product.imageURL}}">
        <div class="box-element product">
            <h6><strong>{{product.name}}</strong></h6>
            <hr>
            <button data-product={{product.id}} data-action="add"
                class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            <h4 style="display: inline-block; float: right"><strong>${{product.price|floatformat:2}}</strong></h4>

        </div>
    </div>
    {% endfor %}
</div> -->



{% endblock body %}



********************************************************************************************************************************************


==================================================== templates/cart.html  ====================================================

{% extends 'store/index.html' %}
{% block title %}Cart{% endblock title %}
{% load static %}
{% block body %}

<!--
<div class="col-lg-12">
    <div class="box-element">

        <a class="btn btn-outline-dark" href="{% url 'store' %}">&#x2190; Continue Shopping</a>

        <br>
        <br>
        <table class="table">
            <tr>
                <th>
                    <h5>Items: <strong>{{order.get_cart_items}}</strong></h5>
                </th>
                <th>
                    <h5>Total:<strong>${{order.get_cart_total}}</strong></h5>
                </th>
                <th>
                    <a style="float:right; margin:5px;" class="btn btn-success" href="{% url 'checkout' %}">Checkout</a>
                </th>
            </tr>
        </table>

    </div>

    <br>
    <div class="box-element">
        <div class="cart-row">
            <div style="flex:2"></div>
            <div style="flex:2"><strong>Item</strong></div>
            <div style="flex:1"><strong>Price</strong></div>
            <div style="flex:1"><strong>Quantity</strong></div>
            <div style="flex:1"><strong>Total</strong></div>
        </div>

        {% for item in items %}
        <div class="cart-row">
            <div style="flex:2"><img class="row-image" src="{{item.product.imageURL}}"></div>
            <div style="flex:2">
                <p>{{item.product.name}}</p>
            </div>
            <div style="flex:1">
                <p>${{item.product.price|floatformat:2}}</p>
            </div>
            <div style="flex:1">
                <p class="quantity">{{item.quantity}}</p>
                <div class="quantity">
                    <img data-product={{item.product.id}} data-action="add" class="chg-quantity update-cart"
                        src="{% static  'imgs/arrow-up.png' %}">

                    <img data-product={{item.product.id}} data-action="remove" class="chg-quantity update-cart"
                        src="{% static  'imgs/arrow-down.png' %}">
                </div>
            </div>
            <div style="flex:1">
                <p>${{item.get_total}}</p>
            </div>
        </div>
        {% endfor %}

    </div>
</div>

-->

<div class="row">
    <div class="col-lg-12">
        <div class="box-element">

            <a class="btn btn-outline-dark" href="{% url 'store' %}">&#x2190; Continue Shopping</a>

            <br>
            <br>
            <table class="table">
                <tr>
                    <th>
                        <h5>Items: <strong>{{order.get_cart_items}}</strong></h5>
                    </th>
                    <th>
                        <h5>Total:<strong>${{order.get_cart_total}}</strong></h5>
                    </th>
                    <th>
                        <a style="float:right; margin:5px;" class="btn btn-success"
                            href="{% url 'checkout' %}">Checkout</a>
                    </th>
                </tr>
            </table>

        </div>

        <br>
        <div class="box-element">
            <div class="cart-row">
                <div style="flex:2"></div>
                <div style="flex:2"><strong>Item</strong></div>
                <div style="flex:1"><strong>Price</strong></div>
                <div style="flex:1"><strong>Quantity</strong></div>
                <div style="flex:1"><strong>Total</strong></div>
            </div>

            {% for item in items %}
            <div class="cart-row">
                <div style="flex:2"><img class="row-image" src="{{item.product.imageURL}}"></div>
                <div style="flex:2">
                    <p>{{item.product.name}}</p>
                </div>
                <div style="flex:1">
                    <p>${{item.product.price|floatformat:2}}</p>
                </div>
                <div style="flex:1">
                    <p class="quantity">{{item.quantity}}</p>
                    <div class="quantity">
                        <img data-product={{item.product.id}} data-action="add" class="chg-quantity update-cart"
                            src="{% static  'imgs/arrow-up.png' %}">

                        <img data-product={{item.product.id}} data-action="remove" class="chg-quantity update-cart"
                            src="{% static  'imgs/arrow-down.png' %}">
                    </div>
                </div>
                <div style="flex:1">
                    <p>${{item.get_total}}</p>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>


{% endblock body %}

********************************************************************************************************************************************


==================================================== templates/checkout.html  ====================================================


{% extends 'store/index.html' %}
{% block title %}Checkout{% endblock title %}

{% load static %}
{% block body %}



<div class="row">
    <div class="col-lg-6">
        <div class="box-element" id="form-wrapper">

            <form id="form">
                <div id="user-info">
                    <div class="form-field">
                        <input required class="form-control" type="text" name="name" placeholder="Name..">
                    </div>
                    <div class="form-field">
                        <input required class="form-control" type="email" name="email" placeholder="Email..">
                    </div>
                </div>
                <div id="shipping-info">
                    <hr>
                    <p>Shipping Information:</p>
                    <hr>
                    <div class="form-field">
                        <input class="form-control" type="text" name="address" placeholder="Address..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="city" placeholder="City..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="state" placeholder="State..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="zipcode" placeholder="Zip code..">
                    </div>
                    <div class="form-field">
                        <input class="form-control" type="text" name="country" placeholder="Country..">
                    </div>
                </div>

                <hr>
                <input id="form-button" class="btn btn-success btn-block" type="submit" value="Continue">
            </form>
        </div>

        <br>
        <div class="box-element hidden" id="payment-info">
            <small>Paypal Options</small>
            <div id="paypal-button-container"></div>
            <button id="make-payment">Make payment</button>

        </div>

    </div>

    <div class="col-lg-6">
        <div class="box-element">
            <a class="btn btn-outline-dark" href="{% url 'cart' %}">&#x2190; Back to Cart</a>
            <hr>
            <h3>Order Summary</h3>
            <hr>
            {% for item in items %}
            <div class="cart-row">
                <div style="flex:2"><img src="{{item.product.imageURL}}" alt="image" class="row-image"></div>
                <div style="flex:2">
                    <p>{{item.product.name}}</p>
                </div>
                <div style="flex:1">
                    <p>${{item.product.price|floatformat:2}}</p>
                </div>
                <div style="flex:1">
                    <p>x{{item.quantity}}</p>
                </div>
            </div>
            {% endfor %}

            <h5>Items: {{order.get_cart_items}}</h5>
            <h5>Total: ${{order.get_cart_total|floatformat:2}}</h5>


            <hr>

            <!-- <div class="cart-row">
                <div style="flex:2"><img class="row-image" src="{% static 'imgs/placeholder.png' %}"></div>
                <div style="flex:2">
                    <p>{{item.product.name}}</p>
                </div>
                <div style="flex:1">
                    <p>$10.00</p>
                </div>
                <div style="flex:1">
                    <p>x2</p>
                </div>
            </div>

            <h5>Items: 2</h5>
            <h5>Total: $20</h5> -->
        </div>
    </div>
</div>



<script type='text/javascript'>

    var shipping = '{{order.shipping}}'
    var total = '{{order.get_cart_total|floatformat:2}}'

    if (shipping == 'False') {
        document.getElementById('shipping-info').innerHTML = ''
    }

    if (user != 'AnonymousUser') {
        document.getElementById('user-info').innerHTML = ''
    }

    if (shipping == 'False' && user != 'AnonymousUser') {
        document.getElementById('form-wrapper').classList.add('hidden');
        document.getElementById('payment-info').classList.remove('hidden');
    }

    var form = document.getElementById('form')
    form.addEventListener('submit', function (e) {
        e.preventDefault()
        console.log('Form submitted')
        document.getElementById('form-button').classList.add("hidden");
        document.getElementById('payment-info').classList.remove("hidden");
    })

    document.getElementById('make-payment').addEventListener('click', function (e) {
        submitFormData()
    })

    function submitFormData() {
        console.log('payment button clicked')


        var userFormData = {
            'name': null,
            'email': null,
            'total': total,
        }

        var shippingInfo = {
            'address': null,
            'city': null,
            'state': null,
            'zipcode': null,
            'country': null,
        }

        if (shipping != 'False') {
            shippingInfo.address = form.address.value
            shippingInfo.city = form.city.value
            shippingInfo.zipcode = form.zipcode.value
            shippingInfo.address = form.address.value
            shippingInfo.country = form.country.value
        }

        if (user == 'AnonymousUser') {
            userFormData.name = form.name.value
            userFormData.email = form.email.value
        }

        console.log('Shipping Info : ', shippingInfo)
        console.log('User Info : ', userFormData)

        
        var url = '/process_order/'
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'applicaiton/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify({ 'form': userFormData, 'shipping': shippingInfo }),
        })
        .then((response) => response.json())
        .then((data) => {
                console.log('Success:', data);
                alert('Transaction completed');

                cart = {}
                document.cookie = 'cart=' + JSON.stringify(cart) + ';domain=;path=/'

                window.location.href = '{% url 'store' %}'
            })
    }

</script>







<!--=================================================================================================================-->



{% comment %} <script
    src="https://www.paypal.com/sdk/js?client-id=Aew-EHnbIL9nRLOnrGTg-PMjg3tf1mDMY10-U1ZFrHtnROBz1LXEM0LvUsTAG_fr6bbZCpilphJObhej&currency=USD"></script>

<script>

    var total = '{{order.get_cart_total|floatformat:2}}'
    // Render the PayPal button into #paypal-button-container
    paypal.Buttons({

        // Set up the transaction
        createOrder: function (data, actions) {
            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: parseFloat(total).toFixed(2)
                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (orderData) {
                // Successful capture! For demo purposes:
                console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
                var transaction = orderData.purchase_units[0].payments.captures[0];
                submitFormData()

                // Replace the above to show a success message within this page, e.g.
                // const element = document.getElementById('paypal-button-container');
                // element.innerHTML = '';
                // element.innerHTML = '<h3>Thank you for your payment!</h3>';
                // Or go to another URL:  actions.redirect('thank_you.html');
            });
        }


    }).render('#paypal-button-container');
</script>


<script type="text/javascript">
    var shipping = '{{order.shipping}}'
    var total = '{{order.get_cart_total|floatformat:2}}'

    if (shipping == 'False') {
        document.getElementById('shipping-info').innerHTML = ''
    }

    if (user != 'AnonymousUser') {
        document.getElementById('user-info').innerHTML = ''
    }

    if (shipping == 'False' && user != 'AnonymousUser') {
        //Hide entire form if user is logged in and shipping is false
        document.getElementById('form-wrapper').classList.add("hidden");
        //Show payment if logged in user wants to buy an item that does not require shipping
        document.getElementById('payment-info').classList.remove("hidden");
    }

    var form = document.getElementById('form')
    form.addEventListener('submit', function (e) {
        e.preventDefault()
        console.log('Form Submitted...')
        document.getElementById('form-button').classList.add("hidden");
        document.getElementById('payment-info').classList.remove("hidden");
    })

    document.getElementById('make-payment').addEventListener('click', function (e) {
        submitFormData()
    })

    function submitFormData() {
        console.log('Payment button clicked')

        var userFormData = {
            'name': null,
            'email': null,
            'total': total,
        }

        var shippingInfo = {
            'address': null,
            'city': null,
            'state': null,
            'zipcode': null,
            'country': null,
        }

        if (shipping != 'False') {
            shippingInfo.city = form.city.value
            shippingInfo.state = form.state.value
            shippingInfo.zipcode = form.zipcode.value
            shippingInfo.address = form.address.value
            shippingInfo.country = form.country.value
        }

        if (user == 'AnonymousUser') {
            userFormData.name = form.name.value
            userFormData.email = form.email.value
        }


        console.log('Shipping Info:', shippingInfo)
        console.log('User Info:', userFormData)


        var url = "/process_order/"
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'applicaiton/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify({ 'form': userFormData, 'shipping': shippingInfo }),

        })
            .then((response) => response.json())
            .then((data) => {
                console.log('Success:', data);
                alert('Transaction completed');

                cart = {}
                document.cookie = 'cart=' + JSON.stringify(cart) + ";domain=;path=/"

                window.location.href = "{% url 'store' %}"

            })
    }
</script> {% endcomment %}

<!--========================================================================================================================== -->






<!--
<div class="row">
<div class="col-lg-6">
    <div class="box-element" id="form-wrapper">
        <form id="form">
            <div id="user-info">
                <div class="form-field">
                    <input required class="form-control" type="text" name="name" placeholder="Name..">
                </div>
                <div class="form-field">
                    <input required class="form-control" type="email" name="email" placeholder="Email..">
                </div>
            </div>

            <div id="shipping-info">
                <hr>
                <p>Shipping Information:</p>
                <hr>
                <div class="form-field">
                    <input class="form-control" type="text" name="address" placeholder="Address..">
                </div>
                <div class="form-field">
                    <input class="form-control" type="text" name="city" placeholder="City..">
                </div>
                <div class="form-field">
                    <input class="form-control" type="text" name="state" placeholder="State..">
                </div>
                <div class="form-field">
                    <input class="form-control" type="text" name="zipcode" placeholder="Zip code..">
                </div>
                <div class="form-field">
                    <input class="form-control" type="text" name="country" placeholder="Zip code..">
                </div>
            </div>

            <hr>
            <input id="form-button" class="btn btn-success btn-block" type="submit" value="Continue">
        </form>
    </div>

    <br>
    <div class="box-element hidden" id="payment-info">
        <small>Paypal Options</small>
        <div id="paypal-button-container"></div>
        <button id="make-payment">Make payment</button>

    </div>

</div>

<div class="col-lg-6">
    <div class="box-element">
        <a class="btn btn-outline-dark" href="{% url 'cart' %}">&#x2190; Back to Cart</a>
        <hr>
        <h3>Order Summary</h3>
        <hr>
        {% for item in items %}
        <div class="cart-row">
            <div style="flex:2"><img class="row-image" src="{{item.product.imageURL}}"></div>
            <div style="flex:2">
                <p>{{item.product.name}}</p>
            </div>
            <div style="flex:1">
                <p>${{item.product.price|floatformat:2}}</p>
            </div>
            <div style="flex:1">
                <p>x{{item.quantity}}</p>
            </div>
        </div>
        {% endfor %}
        <h5>Items: {{order.get_cart_items}}</h5>
        <h5>Total: ${{order.get_cart_total|floatformat:2}}</h5>
    </div>
</div>
</div>

<script
    src="https://www.paypal.com/sdk/js?client-id=Aew-EHnbIL9nRLOnrGTg-PMjg3tf1mDMY10-U1ZFrHtnROBz1LXEM0LvUsTAG_fr6bbZCpilphJObhej&currency=USD"></script>

<script>

    var total = '{{order.get_cart_total|floatformat:2}}'
    // Render the PayPal button into #paypal-button-container
    paypal.Buttons({

        // Set up the transaction
        createOrder: function (data, actions) {
            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: parseFloat(total).toFixed(2)
                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (orderData) {
                // Successful capture! For demo purposes:
                console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
                var transaction = orderData.purchase_units[0].payments.captures[0];
                submitFormData()

                // Replace the above to show a success message within this page, e.g.
                // const element = document.getElementById('paypal-button-container');
                // element.innerHTML = '';
                // element.innerHTML = '<h3>Thank you for your payment!</h3>';
                // Or go to another URL:  actions.redirect('thank_you.html');
            });
        }


    }).render('#paypal-button-container');
</script>

<script type="text/javascript">
    var shipping = '{{order.shipping}}'
    var total = '{{order.get_cart_total|floatformat:2}}'

    if (shipping == 'False') {
        document.getElementById('shipping-info').innerHTML = ''
    }

    if (user != 'AnonymousUser') {
        document.getElementById('user-info').innerHTML = ''
    }

    if (shipping == 'False' && user != 'AnonymousUser') {
        //Hide entire form if user is logged in and shipping is false
        document.getElementById('form-wrapper').classList.add("hidden");
        //Show payment if logged in user wants to buy an item that does not require shipping
        document.getElementById('payment-info').classList.remove("hidden");
    }

    var form = document.getElementById('form')
    form.addEventListener('submit', function (e) {
        e.preventDefault()
        console.log('Form Submitted...')
        document.getElementById('form-button').classList.add("hidden");
        document.getElementById('payment-info').classList.remove("hidden");
    })

    document.getElementById('make-payment').addEventListener('click',function(e){
        submitFormData()
    })

    function submitFormData() {
        console.log('Payment button clicked')

        var userFormData = {
            'name': null,
            'email': null,
            'total': total,
        }

        var shippingInfo = {
            'address': null,
            'city': null,
            'state': null,
            'zipcode': null,
        }

        if (shipping != 'False') {
            shippingInfo.address = form.address.value
            shippingInfo.city = form.city.value
            shippingInfo.state = form.state.value
            shippingInfo.zipcode = form.zipcode.value
        }

        if (user == 'AnonymousUser') {
            userFormData.name = form.name.value
            userFormData.email = form.email.value
        }

        console.log('Shipping Info:', shippingInfo)
        console.log('User Info:', userFormData)

        var url = "/process_order/"
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'applicaiton/json',
                'X-CSRFToken': csrftoken,
            },
            body: JSON.stringify({ 'form': userFormData, 'shipping': shippingInfo }),

        })
            .then((response) => response.json())
            .then((data) => {
                console.log('Success:', data);
                alert('Transaction completed');

                cart = {}
                document.cookie = 'cart=' + JSON.stringify(cart) + ";domain=;path=/"

                window.location.href = "{% url 'store' %}"

            })
    }
</script>
-->

{% endblock body %}


********************************************************************************************************************************************


====================================================   ====================================================



********************************************************************************************************************************************













